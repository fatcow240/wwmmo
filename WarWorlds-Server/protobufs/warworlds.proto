//
// Copyright (c) 2012, Dean Harding (dean@codeka.com.au)
//

// TODO: separate these into separate packages?
package warworlds;

//
// This is used when you first connect, we display some news, important announcements,
// stuff of that nature.
//
message MessageOfTheDay
{
	required string message = 1;
	required string last_update = 2; // last update date (in ISO string format)
}


//
// Contains details about a device's registration with C2DM so that we can send you
// messages and stuff (e.g. when your planet is under attack, etc)
//
message DeviceRegistration
{
	// The identifier of the device. You can have multiple accounts on one device, this
	// will then refer to the device itself.
	required string device_id = 1;

	// The identifier of this *registration*. You can register one account on one device,
	// but you could have the same account on multiple devices, too.
	required string device_registration_id = 2;

	// The value of android.os.Build.MODEL for this device
	required string device_model = 4;

	// The value of android.os.Build.MANUFACTURER for this device
	required string device_manufacturer = 5;

	// The value of android.os.Build.DISPLAY for this device
	required string device_build = 6;

	// The value of android.os.Build.VERSION.RELEASE for this device (note that this can
	// change if you upgrade the OS without re-registering your device!)
	required string device_version = 7;

	// If set, this is the user that the device belongs to. This is usually only returned
	// when you fetch registrations, adding registrations you can obviously only register
	// to yourself (i.e. if this is present, it's ignored anyway)
	optional string user = 3;
}

//
// Represents a collection of device registrations.
//
message DeviceRegistrations
{
	repeated DeviceRegistration registrations = 1;
}

//
// Represents a message that we'll be sending to a device.
//
message DeviceMessage
{
	required string message = 1;
}

//
// Represents a "sector" of space, containing a number of stars and whatnot.
message Sector
{
	// these are the (x,y) coordinates of the sector. (0,0) is the "centre" of the universe,
	// (1,1) is one sector up and to the right, and so on.
	required int64 x = 1;
	required int64 y = 2;

	// the collection of stars in this sector.
	repeated Star stars = 3;
}

//
// Represents a single star within a sector. The star can have a few planets, though this
// is optional (we don't always return the list of planets with a star).
//
message Star
{
	// the name of the star
	required string name = 1;

	// the colour of the star, as an RGB value
	required uint32 colour = 2;

	// the apparent "size" of the star (which is really just a display thing)
	required int32 size = 3;

	// the offset from the left edge of the sector, in pixels
	required int32 offset_x = 4;

	// the offset from the bottom edge of the sector, in pixels
	required int32 offset_y = 5;

	// the number of planets orbiting this star (useful for knowing whether there are
	// actually planets, and the planets field is just empty, or whether there are no
	// planets anyway).
	required int32 num_planets = 6;

	// the collection of planets orbiting this star (may be empty)
	repeated Planet planets = 7;
}

//
// Represents a planet in the star system. A planet orbits a \c Star which in turn belongs
// to a \c Sector.
//
message Planet
{

}

//
// Represents a list of sectors.
//
message Sectors
{
	repeated Sector sectors = 1;
}