// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.model;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;

public final class DeviceRegistration extends Message {

  public static final String DEFAULT_KEY = "";
  public static final String DEFAULT_DEVICE_ID = "";
  public static final String DEFAULT_GCM_REGISTRATION_ID = "";
  public static final String DEFAULT_DEVICE_MODEL = "";
  public static final String DEFAULT_DEVICE_MANUFACTURER = "";
  public static final String DEFAULT_DEVICE_BUILD = "";
  public static final String DEFAULT_DEVICE_VERSION = "";
  public static final String DEFAULT_USER = "";

  /**
   * Unique identifier for this particuilar registration (similar to device_registration_id,
   * but that's specific to C2DN and is kind a long and unweildy string).
   */
  @ProtoField(tag = 1, type = STRING)
  public String key;

  /**
   * The identifier of the device. You can have multiple accounts on one device, this
   * will then refer to the device itself.
   */
  @ProtoField(tag = 2, type = STRING)
  public String device_id;

  /**
   * The identifier of the GCM registration. When you complete the GCM registration
   * process, you'll need to update this to include the GCM registration ID so that
   * we can send you notifications.
   */
  @ProtoField(tag = 3, type = STRING)
  public String gcm_registration_id;

  /**
   * The value of android.os.Build.MODEL for this device
   */
  @ProtoField(tag = 4, type = STRING)
  public String device_model;

  /**
   * The value of android.os.Build.MANUFACTURER for this device
   */
  @ProtoField(tag = 5, type = STRING)
  public String device_manufacturer;

  /**
   * The value of android.os.Build.DISPLAY for this device
   */
  @ProtoField(tag = 6, type = STRING)
  public String device_build;

  /**
   * The value of android.os.Build.VERSION.RELEASE for this device (note that this can
   * change if you upgrade the OS without re-registering your device!)
   */
  @ProtoField(tag = 7, type = STRING)
  public String device_version;

  /**
   * If set, this is the user that the device belongs to. This is usually only returned
   * when you fetch registrations, adding registrations you can obviously only register
   * to yourself (i.e. if this is present, it's ignored anyway)
   */
  @ProtoField(tag = 8, type = STRING)
  public String user;

  private DeviceRegistration(Builder builder) {
    super(builder);
    this.key = builder.key;
    this.device_id = builder.device_id;
    this.gcm_registration_id = builder.gcm_registration_id;
    this.device_model = builder.device_model;
    this.device_manufacturer = builder.device_manufacturer;
    this.device_build = builder.device_build;
    this.device_version = builder.device_version;
    this.user = builder.user;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DeviceRegistration)) return false;
    DeviceRegistration o = (DeviceRegistration) other;
    return equals(key, o.key)
        && equals(device_id, o.device_id)
        && equals(gcm_registration_id, o.gcm_registration_id)
        && equals(device_model, o.device_model)
        && equals(device_manufacturer, o.device_manufacturer)
        && equals(device_build, o.device_build)
        && equals(device_version, o.device_version)
        && equals(user, o.user);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = key != null ? key.hashCode() : 0;
      result = result * 37 + (device_id != null ? device_id.hashCode() : 0);
      result = result * 37 + (gcm_registration_id != null ? gcm_registration_id.hashCode() : 0);
      result = result * 37 + (device_model != null ? device_model.hashCode() : 0);
      result = result * 37 + (device_manufacturer != null ? device_manufacturer.hashCode() : 0);
      result = result * 37 + (device_build != null ? device_build.hashCode() : 0);
      result = result * 37 + (device_version != null ? device_version.hashCode() : 0);
      result = result * 37 + (user != null ? user.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<DeviceRegistration> {

    public String key;
    public String device_id;
    public String gcm_registration_id;
    public String device_model;
    public String device_manufacturer;
    public String device_build;
    public String device_version;
    public String user;

    public Builder() {
    }

    public Builder(DeviceRegistration message) {
      super(message);
      if (message == null) return;
      this.key = message.key;
      this.device_id = message.device_id;
      this.gcm_registration_id = message.gcm_registration_id;
      this.device_model = message.device_model;
      this.device_manufacturer = message.device_manufacturer;
      this.device_build = message.device_build;
      this.device_version = message.device_version;
      this.user = message.user;
    }

    public Builder key(String key) {
      this.key = key;
      return this;
    }

    public Builder device_id(String device_id) {
      this.device_id = device_id;
      return this;
    }

    public Builder gcm_registration_id(String gcm_registration_id) {
      this.gcm_registration_id = gcm_registration_id;
      return this;
    }

    public Builder device_model(String device_model) {
      this.device_model = device_model;
      return this;
    }

    public Builder device_manufacturer(String device_manufacturer) {
      this.device_manufacturer = device_manufacturer;
      return this;
    }

    public Builder device_build(String device_build) {
      this.device_build = device_build;
      return this;
    }

    public Builder device_version(String device_version) {
      this.device_version = device_version;
      return this;
    }

    public Builder user(String user) {
      this.user = user;
      return this;
    }

    @Override
    public DeviceRegistration build() {
      return new DeviceRegistration(this);
    }
  }
}
