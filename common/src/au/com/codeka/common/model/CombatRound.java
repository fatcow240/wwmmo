// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.model;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.FLOAT;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class CombatRound extends Message {

  public static final String DEFAULT_STAR_KEY = "";
  public static final Long DEFAULT_ROUND_TIME = 0L;
  public static final List<FleetSummary> DEFAULT_FLEETS = Collections.emptyList();
  public static final List<FleetJoinedRecord> DEFAULT_FLEETS_JOINED = Collections.emptyList();
  public static final List<FleetTargetRecord> DEFAULT_FLEETS_TARGETTED = Collections.emptyList();
  public static final List<FleetAttackRecord> DEFAULT_FLEETS_ATTACKED = Collections.emptyList();
  public static final List<FleetDamagedRecord> DEFAULT_FLEETS_DAMAGED = Collections.emptyList();

  @ProtoField(tag = 1, type = STRING)
  public String star_key;

  @ProtoField(tag = 2, type = INT64)
  public Long round_time;

  @ProtoField(tag = 3, label = REPEATED)
  public List<FleetSummary> fleets;

  @ProtoField(tag = 4, label = REPEATED)
  public List<FleetJoinedRecord> fleets_joined;

  @ProtoField(tag = 5, label = REPEATED)
  public List<FleetTargetRecord> fleets_targetted;

  @ProtoField(tag = 6, label = REPEATED)
  public List<FleetAttackRecord> fleets_attacked;

  @ProtoField(tag = 7, label = REPEATED)
  public List<FleetDamagedRecord> fleets_damaged;

  private CombatRound(Builder builder) {
    super(builder);
    this.star_key = builder.star_key;
    this.round_time = builder.round_time;
    this.fleets = copyOf(builder.fleets);
    this.fleets_joined = copyOf(builder.fleets_joined);
    this.fleets_targetted = copyOf(builder.fleets_targetted);
    this.fleets_attacked = copyOf(builder.fleets_attacked);
    this.fleets_damaged = copyOf(builder.fleets_damaged);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CombatRound)) return false;
    CombatRound o = (CombatRound) other;
    return equals(star_key, o.star_key)
        && equals(round_time, o.round_time)
        && equals(fleets, o.fleets)
        && equals(fleets_joined, o.fleets_joined)
        && equals(fleets_targetted, o.fleets_targetted)
        && equals(fleets_attacked, o.fleets_attacked)
        && equals(fleets_damaged, o.fleets_damaged);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = star_key != null ? star_key.hashCode() : 0;
      result = result * 37 + (round_time != null ? round_time.hashCode() : 0);
      result = result * 37 + (fleets != null ? fleets.hashCode() : 0);
      result = result * 37 + (fleets_joined != null ? fleets_joined.hashCode() : 0);
      result = result * 37 + (fleets_targetted != null ? fleets_targetted.hashCode() : 0);
      result = result * 37 + (fleets_attacked != null ? fleets_attacked.hashCode() : 0);
      result = result * 37 + (fleets_damaged != null ? fleets_damaged.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<CombatRound> {

    public String star_key;
    public Long round_time;
    public List<FleetSummary> fleets;
    public List<FleetJoinedRecord> fleets_joined;
    public List<FleetTargetRecord> fleets_targetted;
    public List<FleetAttackRecord> fleets_attacked;
    public List<FleetDamagedRecord> fleets_damaged;

    public Builder() {
    }

    public Builder(CombatRound message) {
      super(message);
      if (message == null) return;
      this.star_key = message.star_key;
      this.round_time = message.round_time;
      this.fleets = copyOf(message.fleets);
      this.fleets_joined = copyOf(message.fleets_joined);
      this.fleets_targetted = copyOf(message.fleets_targetted);
      this.fleets_attacked = copyOf(message.fleets_attacked);
      this.fleets_damaged = copyOf(message.fleets_damaged);
    }

    public Builder star_key(String star_key) {
      this.star_key = star_key;
      return this;
    }

    public Builder round_time(Long round_time) {
      this.round_time = round_time;
      return this;
    }

    public Builder fleets(List<FleetSummary> fleets) {
      this.fleets = fleets;
      return this;
    }

    public Builder fleets_joined(List<FleetJoinedRecord> fleets_joined) {
      this.fleets_joined = fleets_joined;
      return this;
    }

    public Builder fleets_targetted(List<FleetTargetRecord> fleets_targetted) {
      this.fleets_targetted = fleets_targetted;
      return this;
    }

    public Builder fleets_attacked(List<FleetAttackRecord> fleets_attacked) {
      this.fleets_attacked = fleets_attacked;
      return this;
    }

    public Builder fleets_damaged(List<FleetDamagedRecord> fleets_damaged) {
      this.fleets_damaged = fleets_damaged;
      return this;
    }

    @Override
    public CombatRound build() {
      return new CombatRound(this);
    }
  }

  public static final class FleetSummary extends Message {

    public static final List<String> DEFAULT_FLEET_KEYS = Collections.emptyList();
    public static final String DEFAULT_EMPIRE_KEY = "";
    public static final String DEFAULT_DESIGN_ID = "";
    public static final Float DEFAULT_NUM_SHIPS = 0F;
    public static final Fleet.FLEET_STANCE DEFAULT_STANCE = Fleet.FLEET_STANCE.PASSIVE;
    public static final Fleet.FLEET_STATE DEFAULT_STATE = Fleet.FLEET_STATE.IDLE;

    @ProtoField(tag = 1, type = STRING, label = REPEATED)
    public List<String> fleet_keys;

    @ProtoField(tag = 2, type = STRING)
    public String empire_key;

    @ProtoField(tag = 3, type = STRING)
    public String design_id;

    @ProtoField(tag = 4, type = FLOAT)
    public Float num_ships;

    @ProtoField(tag = 5, type = ENUM)
    public Fleet.FLEET_STANCE stance;

    @ProtoField(tag = 6, type = ENUM)
    public Fleet.FLEET_STATE state;

    private FleetSummary(Builder builder) {
      super(builder);
      this.fleet_keys = copyOf(builder.fleet_keys);
      this.empire_key = builder.empire_key;
      this.design_id = builder.design_id;
      this.num_ships = builder.num_ships;
      this.stance = builder.stance;
      this.state = builder.state;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof FleetSummary)) return false;
      FleetSummary o = (FleetSummary) other;
      return equals(fleet_keys, o.fleet_keys)
          && equals(empire_key, o.empire_key)
          && equals(design_id, o.design_id)
          && equals(num_ships, o.num_ships)
          && equals(stance, o.stance)
          && equals(state, o.state);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = fleet_keys != null ? fleet_keys.hashCode() : 0;
        result = result * 37 + (empire_key != null ? empire_key.hashCode() : 0);
        result = result * 37 + (design_id != null ? design_id.hashCode() : 0);
        result = result * 37 + (num_ships != null ? num_ships.hashCode() : 0);
        result = result * 37 + (stance != null ? stance.hashCode() : 0);
        result = result * 37 + (state != null ? state.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    public static final class Builder extends Message.Builder<FleetSummary> {

      public List<String> fleet_keys;
      public String empire_key;
      public String design_id;
      public Float num_ships;
      public Fleet.FLEET_STANCE stance;
      public Fleet.FLEET_STATE state;

      public Builder() {
      }

      public Builder(FleetSummary message) {
        super(message);
        if (message == null) return;
        this.fleet_keys = copyOf(message.fleet_keys);
        this.empire_key = message.empire_key;
        this.design_id = message.design_id;
        this.num_ships = message.num_ships;
        this.stance = message.stance;
        this.state = message.state;
      }

      public Builder fleet_keys(List<String> fleet_keys) {
        this.fleet_keys = fleet_keys;
        return this;
      }

      public Builder empire_key(String empire_key) {
        this.empire_key = empire_key;
        return this;
      }

      public Builder design_id(String design_id) {
        this.design_id = design_id;
        return this;
      }

      public Builder num_ships(Float num_ships) {
        this.num_ships = num_ships;
        return this;
      }

      public Builder stance(Fleet.FLEET_STANCE stance) {
        this.stance = stance;
        return this;
      }

      public Builder state(Fleet.FLEET_STATE state) {
        this.state = state;
        return this;
      }

      @Override
      public FleetSummary build() {
        return new FleetSummary(this);
      }
    }
  }

  public static final class FleetJoinedRecord extends Message {

    public static final Integer DEFAULT_FLEET_INDEX = 0;

    @ProtoField(tag = 1, type = INT32)
    public Integer fleet_index;

    private FleetJoinedRecord(Builder builder) {
      super(builder);
      this.fleet_index = builder.fleet_index;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof FleetJoinedRecord)) return false;
      return equals(fleet_index, ((FleetJoinedRecord) other).fleet_index);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      return result != 0 ? result : (hashCode = fleet_index != null ? fleet_index.hashCode() : 0);
    }

    public static final class Builder extends Message.Builder<FleetJoinedRecord> {

      public Integer fleet_index;

      public Builder() {
      }

      public Builder(FleetJoinedRecord message) {
        super(message);
        if (message == null) return;
        this.fleet_index = message.fleet_index;
      }

      public Builder fleet_index(Integer fleet_index) {
        this.fleet_index = fleet_index;
        return this;
      }

      @Override
      public FleetJoinedRecord build() {
        return new FleetJoinedRecord(this);
      }
    }
  }

  public static final class FleetTargetRecord extends Message {

    public static final Integer DEFAULT_FLEET_INDEX = 0;
    public static final Integer DEFAULT_TARGET_INDEX = 0;

    @ProtoField(tag = 1, type = INT32)
    public Integer fleet_index;

    @ProtoField(tag = 2, type = INT32)
    public Integer target_index;

    private FleetTargetRecord(Builder builder) {
      super(builder);
      this.fleet_index = builder.fleet_index;
      this.target_index = builder.target_index;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof FleetTargetRecord)) return false;
      FleetTargetRecord o = (FleetTargetRecord) other;
      return equals(fleet_index, o.fleet_index)
          && equals(target_index, o.target_index);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = fleet_index != null ? fleet_index.hashCode() : 0;
        result = result * 37 + (target_index != null ? target_index.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    public static final class Builder extends Message.Builder<FleetTargetRecord> {

      public Integer fleet_index;
      public Integer target_index;

      public Builder() {
      }

      public Builder(FleetTargetRecord message) {
        super(message);
        if (message == null) return;
        this.fleet_index = message.fleet_index;
        this.target_index = message.target_index;
      }

      public Builder fleet_index(Integer fleet_index) {
        this.fleet_index = fleet_index;
        return this;
      }

      public Builder target_index(Integer target_index) {
        this.target_index = target_index;
        return this;
      }

      @Override
      public FleetTargetRecord build() {
        return new FleetTargetRecord(this);
      }
    }
  }

  public static final class FleetAttackRecord extends Message {

    public static final Integer DEFAULT_FLEET_INDEX = 0;
    public static final Integer DEFAULT_TARGET_INDEX = 0;
    public static final Float DEFAULT_DAMAGE = 0F;

    @ProtoField(tag = 1, type = INT32)
    public Integer fleet_index;

    @ProtoField(tag = 2, type = INT32)
    public Integer target_index;

    @ProtoField(tag = 3, type = FLOAT)
    public Float damage;

    private FleetAttackRecord(Builder builder) {
      super(builder);
      this.fleet_index = builder.fleet_index;
      this.target_index = builder.target_index;
      this.damage = builder.damage;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof FleetAttackRecord)) return false;
      FleetAttackRecord o = (FleetAttackRecord) other;
      return equals(fleet_index, o.fleet_index)
          && equals(target_index, o.target_index)
          && equals(damage, o.damage);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = fleet_index != null ? fleet_index.hashCode() : 0;
        result = result * 37 + (target_index != null ? target_index.hashCode() : 0);
        result = result * 37 + (damage != null ? damage.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    public static final class Builder extends Message.Builder<FleetAttackRecord> {

      public Integer fleet_index;
      public Integer target_index;
      public Float damage;

      public Builder() {
      }

      public Builder(FleetAttackRecord message) {
        super(message);
        if (message == null) return;
        this.fleet_index = message.fleet_index;
        this.target_index = message.target_index;
        this.damage = message.damage;
      }

      public Builder fleet_index(Integer fleet_index) {
        this.fleet_index = fleet_index;
        return this;
      }

      public Builder target_index(Integer target_index) {
        this.target_index = target_index;
        return this;
      }

      public Builder damage(Float damage) {
        this.damage = damage;
        return this;
      }

      @Override
      public FleetAttackRecord build() {
        return new FleetAttackRecord(this);
      }
    }
  }

  public static final class FleetDamagedRecord extends Message {

    public static final Integer DEFAULT_FLEET_INDEX = 0;
    public static final Float DEFAULT_DAMAGE = 0F;

    @ProtoField(tag = 1, type = INT32)
    public Integer fleet_index;

    @ProtoField(tag = 2, type = FLOAT)
    public Float damage;

    private FleetDamagedRecord(Builder builder) {
      super(builder);
      this.fleet_index = builder.fleet_index;
      this.damage = builder.damage;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof FleetDamagedRecord)) return false;
      FleetDamagedRecord o = (FleetDamagedRecord) other;
      return equals(fleet_index, o.fleet_index)
          && equals(damage, o.damage);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = fleet_index != null ? fleet_index.hashCode() : 0;
        result = result * 37 + (damage != null ? damage.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    public static final class Builder extends Message.Builder<FleetDamagedRecord> {

      public Integer fleet_index;
      public Float damage;

      public Builder() {
      }

      public Builder(FleetDamagedRecord message) {
        super(message);
        if (message == null) return;
        this.fleet_index = message.fleet_index;
        this.damage = message.damage;
      }

      public Builder fleet_index(Integer fleet_index) {
        this.fleet_index = fleet_index;
        return this;
      }

      public Builder damage(Float damage) {
        this.damage = damage;
        return this;
      }

      @Override
      public FleetDamagedRecord build() {
        return new FleetDamagedRecord(this);
      }
    }
  }
}
