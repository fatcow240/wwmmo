// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.model;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class Star extends Message {

  public static final String DEFAULT_KEY = "";
  public static final Long DEFAULT_SECTOR_X = 0L;
  public static final Long DEFAULT_SECTOR_Y = 0L;
  public static final String DEFAULT_NAME = "";
  public static final CLASSIFICATION DEFAULT_CLASSIFICATION = CLASSIFICATION.BLUE;
  public static final Integer DEFAULT_SIZE = 0;
  public static final Integer DEFAULT_OFFSET_X = 0;
  public static final Integer DEFAULT_OFFSET_Y = 0;
  public static final List<Planet> DEFAULT_PLANETS = Collections.emptyList();
  public static final List<Colony> DEFAULT_COLONIES = Collections.emptyList();
  public static final List<Building> DEFAULT_BUILDINGS = Collections.emptyList();
  public static final List<EmpirePresence> DEFAULT_EMPIRES = Collections.emptyList();
  public static final List<BuildRequest> DEFAULT_BUILD_REQUESTS = Collections.emptyList();
  public static final List<Fleet> DEFAULT_FLEETS = Collections.emptyList();
  public static final Long DEFAULT_TIME_EMPTIED = 0L;
  public static final Long DEFAULT_LAST_SIMULATION = 0L;
  public static final CombatReport DEFAULT_CURRENT_COMBAT_REPORT = getDefaultInstance(CombatReport.class);

  /**
   * the identifier of the star, unique throughout the universe.
   */
  @ProtoField(tag = 1, type = STRING)
  public String key;

  /**
   * the sector this star is contained within
   */
  @ProtoField(tag = 11, type = INT64)
  public Long sector_x;

  @ProtoField(tag = 12, type = INT64)
  public Long sector_y;

  /**
   * the name of the star
   */
  @ProtoField(tag = 2, type = STRING)
  public String name;

  @ProtoField(tag = 3, type = ENUM)
  public CLASSIFICATION classification;

  /**
   * the apparent "size" of the star (which is really just a display thing)
   */
  @ProtoField(tag = 5, type = INT32)
  public Integer size;

  /**
   * the offset from the left edge of the sector, in pixels
   */
  @ProtoField(tag = 6, type = INT32)
  public Integer offset_x;

  /**
   * the offset from the bottom edge of the sector, in pixels
   */
  @ProtoField(tag = 7, type = INT32)
  public Integer offset_y;

  /**
   * the collection of planets orbiting this star (may be empty, for example in the list
   * of stars in a sector)
   */
  @ProtoField(tag = 9, label = REPEATED)
  public List<Planet> planets;

  /**
   * collection of colonies on our planet(s)
   */
  @ProtoField(tag = 10, label = REPEATED)
  public List<Colony> colonies;

  /**
   * collection of buildings in our colonies.
   */
  @ProtoField(tag = 13, label = REPEATED)
  public List<Building> buildings;

  /**
   * collection of EmpirePresences details the presences of the empire(s) in this solar system.
   */
  @ProtoField(tag = 14, label = REPEATED)
  public List<EmpirePresence> empires;

  /**
   * collection of BuildRequests for colonies in this star
   */
  @ProtoField(tag = 15, label = REPEATED)
  public List<BuildRequest> build_requests;

  /**
   * List of fleets located in this star
   */
  @ProtoField(tag = 16, label = REPEATED)
  public List<Fleet> fleets;

  /**
   * This is the time (in seconds since Unix epoch) since this star "became" empty -- that is,
   * after the colony was destroyed. This only has meaning if the star has no colonies currently.
   */
  @ProtoField(tag = 17, type = INT64)
  public Long time_emptied;

  /**
   * Time, that this star was last simulated
   */
  @ProtoField(tag = 18, type = INT64)
  public Long last_simulation;

  /**
   * If we're in the middle of combat, this will be the combat report for what's currently
   * going on.
   */
  @ProtoField(tag = 19)
  public CombatReport current_combat_report;

  private Star(Builder builder) {
    super(builder);
    this.key = builder.key;
    this.sector_x = builder.sector_x;
    this.sector_y = builder.sector_y;
    this.name = builder.name;
    this.classification = builder.classification;
    this.size = builder.size;
    this.offset_x = builder.offset_x;
    this.offset_y = builder.offset_y;
    this.planets = immutableCopyOf(builder.planets);
    this.colonies = immutableCopyOf(builder.colonies);
    this.buildings = immutableCopyOf(builder.buildings);
    this.empires = immutableCopyOf(builder.empires);
    this.build_requests = immutableCopyOf(builder.build_requests);
    this.fleets = immutableCopyOf(builder.fleets);
    this.time_emptied = builder.time_emptied;
    this.last_simulation = builder.last_simulation;
    this.current_combat_report = builder.current_combat_report;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Star)) return false;
    Star o = (Star) other;
    return equals(key, o.key)
        && equals(sector_x, o.sector_x)
        && equals(sector_y, o.sector_y)
        && equals(name, o.name)
        && equals(classification, o.classification)
        && equals(size, o.size)
        && equals(offset_x, o.offset_x)
        && equals(offset_y, o.offset_y)
        && equals(planets, o.planets)
        && equals(colonies, o.colonies)
        && equals(buildings, o.buildings)
        && equals(empires, o.empires)
        && equals(build_requests, o.build_requests)
        && equals(fleets, o.fleets)
        && equals(time_emptied, o.time_emptied)
        && equals(last_simulation, o.last_simulation)
        && equals(current_combat_report, o.current_combat_report);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = key != null ? key.hashCode() : 0;
      result = result * 37 + (sector_x != null ? sector_x.hashCode() : 0);
      result = result * 37 + (sector_y != null ? sector_y.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (classification != null ? classification.hashCode() : 0);
      result = result * 37 + (size != null ? size.hashCode() : 0);
      result = result * 37 + (offset_x != null ? offset_x.hashCode() : 0);
      result = result * 37 + (offset_y != null ? offset_y.hashCode() : 0);
      result = result * 37 + (planets != null ? planets.hashCode() : 0);
      result = result * 37 + (colonies != null ? colonies.hashCode() : 0);
      result = result * 37 + (buildings != null ? buildings.hashCode() : 0);
      result = result * 37 + (empires != null ? empires.hashCode() : 0);
      result = result * 37 + (build_requests != null ? build_requests.hashCode() : 0);
      result = result * 37 + (fleets != null ? fleets.hashCode() : 0);
      result = result * 37 + (time_emptied != null ? time_emptied.hashCode() : 0);
      result = result * 37 + (last_simulation != null ? last_simulation.hashCode() : 0);
      result = result * 37 + (current_combat_report != null ? current_combat_report.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Star> {

    public String key;
    public Long sector_x;
    public Long sector_y;
    public String name;
    public CLASSIFICATION classification;
    public Integer size;
    public Integer offset_x;
    public Integer offset_y;
    public List<Planet> planets;
    public List<Colony> colonies;
    public List<Building> buildings;
    public List<EmpirePresence> empires;
    public List<BuildRequest> build_requests;
    public List<Fleet> fleets;
    public Long time_emptied;
    public Long last_simulation;
    public CombatReport current_combat_report;

    public Builder() {
    }

    public Builder(Star message) {
      super(message);
      if (message == null) return;
      this.key = message.key;
      this.sector_x = message.sector_x;
      this.sector_y = message.sector_y;
      this.name = message.name;
      this.classification = message.classification;
      this.size = message.size;
      this.offset_x = message.offset_x;
      this.offset_y = message.offset_y;
      this.planets = copyOf(message.planets);
      this.colonies = copyOf(message.colonies);
      this.buildings = copyOf(message.buildings);
      this.empires = copyOf(message.empires);
      this.build_requests = copyOf(message.build_requests);
      this.fleets = copyOf(message.fleets);
      this.time_emptied = message.time_emptied;
      this.last_simulation = message.last_simulation;
      this.current_combat_report = message.current_combat_report;
    }

    public Builder key(String key) {
      this.key = key;
      return this;
    }

    public Builder sector_x(Long sector_x) {
      this.sector_x = sector_x;
      return this;
    }

    public Builder sector_y(Long sector_y) {
      this.sector_y = sector_y;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder classification(CLASSIFICATION classification) {
      this.classification = classification;
      return this;
    }

    public Builder size(Integer size) {
      this.size = size;
      return this;
    }

    public Builder offset_x(Integer offset_x) {
      this.offset_x = offset_x;
      return this;
    }

    public Builder offset_y(Integer offset_y) {
      this.offset_y = offset_y;
      return this;
    }

    public Builder planets(List<Planet> planets) {
      this.planets = planets;
      return this;
    }

    public Builder colonies(List<Colony> colonies) {
      this.colonies = colonies;
      return this;
    }

    public Builder buildings(List<Building> buildings) {
      this.buildings = buildings;
      return this;
    }

    public Builder empires(List<EmpirePresence> empires) {
      this.empires = empires;
      return this;
    }

    public Builder build_requests(List<BuildRequest> build_requests) {
      this.build_requests = build_requests;
      return this;
    }

    public Builder fleets(List<Fleet> fleets) {
      this.fleets = fleets;
      return this;
    }

    public Builder time_emptied(Long time_emptied) {
      this.time_emptied = time_emptied;
      return this;
    }

    public Builder last_simulation(Long last_simulation) {
      this.last_simulation = last_simulation;
      return this;
    }

    public Builder current_combat_report(CombatReport current_combat_report) {
      this.current_combat_report = current_combat_report;
      return this;
    }

    @Override
    public Star build() {
      return new Star(this);
    }
  }

  public enum CLASSIFICATION {
    @ProtoEnum(0)
    BLUE,
    @ProtoEnum(1)
    WHITE,
    @ProtoEnum(2)
    YELLOW,
    @ProtoEnum(3)
    ORANGE,
    @ProtoEnum(4)
    RED,
    @ProtoEnum(5)
    NEUTRON,
    @ProtoEnum(6)
    BLACKHOLE,
  }
}
