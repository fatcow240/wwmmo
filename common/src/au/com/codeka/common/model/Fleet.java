// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.model;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.FLOAT;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class Fleet extends Message {

  public static final String DEFAULT_KEY = "";
  public static final String DEFAULT_EMPIRE_KEY = "";
  public static final String DEFAULT_DESIGN_ID = "";
  public static final Float DEFAULT_NUM_SHIPS = 0F;
  public static final FLEET_STATE DEFAULT_STATE = FLEET_STATE.IDLE;
  public static final Long DEFAULT_STATE_START_TIME = 0L;
  public static final String DEFAULT_STAR_KEY = "";
  public static final String DEFAULT_DESTINATION_STAR_KEY = "";
  public static final String DEFAULT_TARGET_FLEET_KEY = "";
  public static final String DEFAULT_TARGET_COLONY_KEY = "";
  public static final FLEET_STANCE DEFAULT_STANCE = FLEET_STANCE.PASSIVE;
  public static final Long DEFAULT_TIME_DESTROYED = 0L;
  public static final Boolean DEFAULT_BLOCK_NOTIFICATION_ON_DESTROY = false;
  public static final Long DEFAULT_LAST_VICTORY = 0L;
  public static final Long DEFAULT_ETA = 0L;

  /**
   * The unique key for this fleet
   */
  @ProtoField(tag = 1, type = STRING, label = REQUIRED)
  public String key;

  /**
   * The key of the empire who owns this fleet
   */
  @ProtoField(tag = 2, type = STRING)
  public String empire_key;

  /**
   * The name of the ship design of the ship(s) in this fleet
   */
  @ProtoField(tag = 3, type = STRING)
  public String design_id;

  /**
   * The number of ships in this fleet. This is a floating point number because of the way
   * damage is calculated in combat. We only ever display the Math.ceil() of this number to
   * the user, however.
   */
  @ProtoField(tag = 4, type = FLOAT)
  public Float num_ships;

  @ProtoField(tag = 5, type = ENUM)
  public FLEET_STATE state;

  /**
   * The time this fleet was moved into the current state (used to determine things like
   * distance between planets when moving, etc)
   */
  @ProtoField(tag = 6, type = INT64)
  public Long state_start_time;

  /**
   * The star this fleet is associated with. If moving, star_key is the star we're moving
   * FROM and destination_star_key is the star we're moving TO.
   */
  @ProtoField(tag = 7, type = STRING)
  public String star_key;

  @ProtoField(tag = 8, type = STRING)
  public String destination_star_key;

  /**
   * If in attacking state, this is the target fleet or colony we're attacking
   */
  @ProtoField(tag = 9, type = STRING)
  public String target_fleet_key;

  @ProtoField(tag = 10, type = STRING)
  public String target_colony_key;

  @ProtoField(tag = 11, type = ENUM)
  public FLEET_STANCE stance;

  /**
   * This is used internally by the server, it'll never appear in a response from the server.
   */
  @ProtoField(tag = 12, type = INT64)
  public Long time_destroyed;

  @ProtoField(tag = 14, type = BOOL)
  public Boolean block_notification_on_destroy;

  /**
   * This is the date/time of the last battle this fleet was victorious in,
   * it's mostly useless on the client (used for some housekeeping on the
   * server)
   */
  @ProtoField(tag = 13, type = INT64)
  public Long last_victory;

  /**
   * for moving fleets, this is the time we expect it to arrive
   */
  @ProtoField(tag = 15, type = INT64)
  public Long eta;

  private Fleet(Builder builder) {
    super(builder);
    this.key = builder.key;
    this.empire_key = builder.empire_key;
    this.design_id = builder.design_id;
    this.num_ships = builder.num_ships;
    this.state = builder.state;
    this.state_start_time = builder.state_start_time;
    this.star_key = builder.star_key;
    this.destination_star_key = builder.destination_star_key;
    this.target_fleet_key = builder.target_fleet_key;
    this.target_colony_key = builder.target_colony_key;
    this.stance = builder.stance;
    this.time_destroyed = builder.time_destroyed;
    this.block_notification_on_destroy = builder.block_notification_on_destroy;
    this.last_victory = builder.last_victory;
    this.eta = builder.eta;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Fleet)) return false;
    Fleet o = (Fleet) other;
    return equals(key, o.key)
        && equals(empire_key, o.empire_key)
        && equals(design_id, o.design_id)
        && equals(num_ships, o.num_ships)
        && equals(state, o.state)
        && equals(state_start_time, o.state_start_time)
        && equals(star_key, o.star_key)
        && equals(destination_star_key, o.destination_star_key)
        && equals(target_fleet_key, o.target_fleet_key)
        && equals(target_colony_key, o.target_colony_key)
        && equals(stance, o.stance)
        && equals(time_destroyed, o.time_destroyed)
        && equals(block_notification_on_destroy, o.block_notification_on_destroy)
        && equals(last_victory, o.last_victory)
        && equals(eta, o.eta);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = key != null ? key.hashCode() : 0;
      result = result * 37 + (empire_key != null ? empire_key.hashCode() : 0);
      result = result * 37 + (design_id != null ? design_id.hashCode() : 0);
      result = result * 37 + (num_ships != null ? num_ships.hashCode() : 0);
      result = result * 37 + (state != null ? state.hashCode() : 0);
      result = result * 37 + (state_start_time != null ? state_start_time.hashCode() : 0);
      result = result * 37 + (star_key != null ? star_key.hashCode() : 0);
      result = result * 37 + (destination_star_key != null ? destination_star_key.hashCode() : 0);
      result = result * 37 + (target_fleet_key != null ? target_fleet_key.hashCode() : 0);
      result = result * 37 + (target_colony_key != null ? target_colony_key.hashCode() : 0);
      result = result * 37 + (stance != null ? stance.hashCode() : 0);
      result = result * 37 + (time_destroyed != null ? time_destroyed.hashCode() : 0);
      result = result * 37 + (block_notification_on_destroy != null ? block_notification_on_destroy.hashCode() : 0);
      result = result * 37 + (last_victory != null ? last_victory.hashCode() : 0);
      result = result * 37 + (eta != null ? eta.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Fleet> {

    public String key;
    public String empire_key;
    public String design_id;
    public Float num_ships;
    public FLEET_STATE state;
    public Long state_start_time;
    public String star_key;
    public String destination_star_key;
    public String target_fleet_key;
    public String target_colony_key;
    public FLEET_STANCE stance;
    public Long time_destroyed;
    public Boolean block_notification_on_destroy;
    public Long last_victory;
    public Long eta;

    public Builder() {
    }

    public Builder(Fleet message) {
      super(message);
      if (message == null) return;
      this.key = message.key;
      this.empire_key = message.empire_key;
      this.design_id = message.design_id;
      this.num_ships = message.num_ships;
      this.state = message.state;
      this.state_start_time = message.state_start_time;
      this.star_key = message.star_key;
      this.destination_star_key = message.destination_star_key;
      this.target_fleet_key = message.target_fleet_key;
      this.target_colony_key = message.target_colony_key;
      this.stance = message.stance;
      this.time_destroyed = message.time_destroyed;
      this.block_notification_on_destroy = message.block_notification_on_destroy;
      this.last_victory = message.last_victory;
      this.eta = message.eta;
    }

    public Builder key(String key) {
      this.key = key;
      return this;
    }

    public Builder empire_key(String empire_key) {
      this.empire_key = empire_key;
      return this;
    }

    public Builder design_id(String design_id) {
      this.design_id = design_id;
      return this;
    }

    public Builder num_ships(Float num_ships) {
      this.num_ships = num_ships;
      return this;
    }

    public Builder state(FLEET_STATE state) {
      this.state = state;
      return this;
    }

    public Builder state_start_time(Long state_start_time) {
      this.state_start_time = state_start_time;
      return this;
    }

    public Builder star_key(String star_key) {
      this.star_key = star_key;
      return this;
    }

    public Builder destination_star_key(String destination_star_key) {
      this.destination_star_key = destination_star_key;
      return this;
    }

    public Builder target_fleet_key(String target_fleet_key) {
      this.target_fleet_key = target_fleet_key;
      return this;
    }

    public Builder target_colony_key(String target_colony_key) {
      this.target_colony_key = target_colony_key;
      return this;
    }

    public Builder stance(FLEET_STANCE stance) {
      this.stance = stance;
      return this;
    }

    public Builder time_destroyed(Long time_destroyed) {
      this.time_destroyed = time_destroyed;
      return this;
    }

    public Builder block_notification_on_destroy(Boolean block_notification_on_destroy) {
      this.block_notification_on_destroy = block_notification_on_destroy;
      return this;
    }

    public Builder last_victory(Long last_victory) {
      this.last_victory = last_victory;
      return this;
    }

    public Builder eta(Long eta) {
      this.eta = eta;
      return this;
    }

    @Override
    public Fleet build() {
      checkRequiredFields();
      return new Fleet(this);
    }
  }

  public enum FLEET_STATE {
    @ProtoEnum(1)
    IDLE,
    @ProtoEnum(2)
    MOVING,
    @ProtoEnum(3)
    ATTACKING,
  }

  public enum FLEET_STANCE {
    @ProtoEnum(1)
    PASSIVE,
    @ProtoEnum(2)
    NEUTRAL,
    @ProtoEnum(3)
    AGGRESSIVE,
  }
}
