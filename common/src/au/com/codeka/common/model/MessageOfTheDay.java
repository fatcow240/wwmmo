// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.model;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class MessageOfTheDay extends Message {

  public static final String DEFAULT_MESSAGE = "";
  public static final String DEFAULT_LAST_UPDATE = "";

  @ProtoField(tag = 1, type = STRING, label = REQUIRED)
  public String message;

  @ProtoField(tag = 2, type = STRING, label = REQUIRED)
  public String last_update;

  private MessageOfTheDay(Builder builder) {
    super(builder);
    this.message = builder.message;
    this.last_update = builder.last_update;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MessageOfTheDay)) return false;
    MessageOfTheDay o = (MessageOfTheDay) other;
    return equals(message, o.message)
        && equals(last_update, o.last_update);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = message != null ? message.hashCode() : 0;
      result = result * 37 + (last_update != null ? last_update.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<MessageOfTheDay> {

    public String message;
    public String last_update;

    public Builder() {
    }

    public Builder(MessageOfTheDay message) {
      super(message);
      if (message == null) return;
      this.message = message.message;
      this.last_update = message.last_update;
    }

    public Builder message(String message) {
      this.message = message;
      return this;
    }

    public Builder last_update(String last_update) {
      this.last_update = last_update;
      return this;
    }

    @Override
    public MessageOfTheDay build() {
      checkRequiredFields();
      return new MessageOfTheDay(this);
    }
  }
}
