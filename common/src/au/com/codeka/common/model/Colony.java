// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.model;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.FLOAT;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;

public final class Colony extends Message {

  public static final String DEFAULT_KEY = "";
  public static final String DEFAULT_EMPIRE_KEY = "";
  public static final String DEFAULT_STAR_KEY = "";
  public static final Integer DEFAULT_PLANET_INDEX = 0;
  public static final Float DEFAULT_POPULATION = 0F;
  public static final Long DEFAULT_DEPRECATED_LAST_SIMULATION = 0L;
  public static final Float DEFAULT_FOCUS_POPULATION = 0F;
  public static final Float DEFAULT_FOCUS_FARMING = 0F;
  public static final Float DEFAULT_FOCUS_MINING = 0F;
  public static final Float DEFAULT_FOCUS_CONSTRUCTION = 0F;
  public static final Float DEFAULT_DELTA_POPULATION = 0F;
  public static final Float DEFAULT_DELTA_GOODS = 0F;
  public static final Float DEFAULT_DELTA_MINERALS = 0F;
  public static final Float DEFAULT_UNCOLLECTED_TAXES = 0F;
  public static final Float DEFAULT_DEFENCE_BONUS = 0F;
  public static final Float DEFAULT_MAX_POPULATION = 0F;
  public static final Long DEFAULT_COOLDOWN_END_TIME = 0L;

  /**
   * The key of this colony, which you can use to refer to it directly.
   */
  @ProtoField(tag = 1, type = STRING)
  public String key;

  /**
   * The key of the empire that owns this colony.
   */
  @ProtoField(tag = 2, type = STRING)
  public String empire_key;

  /**
   * The key of the planet and star this colony belongs to.
   */
  @ProtoField(tag = 4, type = STRING)
  public String star_key;

  @ProtoField(tag = 14, type = INT32)
  public Integer planet_index;

  /**
   * In the backend, population is actually stored as a floating point value, but
   * we don't care about that kind of accuracy.
   */
  @ProtoField(tag = 5, type = FLOAT)
  public Float population;

  /**
   * Time, in seconds since Unix epoch, that this colony was last simulated (i.e.
   * when the population and such was last calculated)
   * NOT_USED_ANY_MORE
   */
  @ProtoField(tag = 6, type = INT64)
  public Long DEPRECATED_last_simulation;

  /**
   * The "focus" of this colony. These numbers must add up to 1.0 and represent
   * the percentage of the population that is focused on the given task.
   */
  @ProtoField(tag = 7, type = FLOAT)
  public Float focus_population;

  @ProtoField(tag = 8, type = FLOAT)
  public Float focus_farming;

  @ProtoField(tag = 9, type = FLOAT)
  public Float focus_mining;

  @ProtoField(tag = 10, type = FLOAT)
  public Float focus_construction;

  /**
   * After simulating, these will contain the delta values (i.e. how much do the goods
   * or whatever changed in this colony) per hour.
   */
  @ProtoField(tag = 11, type = FLOAT)
  public Float delta_population;

  @ProtoField(tag = 12, type = FLOAT)
  public Float delta_goods;

  @ProtoField(tag = 13, type = FLOAT)
  public Float delta_minerals;

  /**
   * Amount of uncollected taxes this colony has generated
   */
  @ProtoField(tag = 15, type = FLOAT)
  public Float uncollected_taxes;

  /**
   * The colony's defence bonus, which when multiplied by one quarter of
   * the population gives the colony's total defence score.
   */
  @ProtoField(tag = 16, type = FLOAT)
  public Float defence_bonus;

  /**
   * When all bonuses and what-not are applies, what is this colony's maximum
   * population?
   */
  @ProtoField(tag = 17, type = FLOAT)
  public Float max_population;

  /**
   * If set, this is the time the "cooldown" period ends. While in cooldown, the colony will
   * not lose population
   */
  @ProtoField(tag = 18, type = INT64)
  public Long cooldown_end_time;

  private Colony(Builder builder) {
    super(builder);
    this.key = builder.key;
    this.empire_key = builder.empire_key;
    this.star_key = builder.star_key;
    this.planet_index = builder.planet_index;
    this.population = builder.population;
    this.DEPRECATED_last_simulation = builder.DEPRECATED_last_simulation;
    this.focus_population = builder.focus_population;
    this.focus_farming = builder.focus_farming;
    this.focus_mining = builder.focus_mining;
    this.focus_construction = builder.focus_construction;
    this.delta_population = builder.delta_population;
    this.delta_goods = builder.delta_goods;
    this.delta_minerals = builder.delta_minerals;
    this.uncollected_taxes = builder.uncollected_taxes;
    this.defence_bonus = builder.defence_bonus;
    this.max_population = builder.max_population;
    this.cooldown_end_time = builder.cooldown_end_time;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Colony)) return false;
    Colony o = (Colony) other;
    return equals(key, o.key)
        && equals(empire_key, o.empire_key)
        && equals(star_key, o.star_key)
        && equals(planet_index, o.planet_index)
        && equals(population, o.population)
        && equals(DEPRECATED_last_simulation, o.DEPRECATED_last_simulation)
        && equals(focus_population, o.focus_population)
        && equals(focus_farming, o.focus_farming)
        && equals(focus_mining, o.focus_mining)
        && equals(focus_construction, o.focus_construction)
        && equals(delta_population, o.delta_population)
        && equals(delta_goods, o.delta_goods)
        && equals(delta_minerals, o.delta_minerals)
        && equals(uncollected_taxes, o.uncollected_taxes)
        && equals(defence_bonus, o.defence_bonus)
        && equals(max_population, o.max_population)
        && equals(cooldown_end_time, o.cooldown_end_time);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = key != null ? key.hashCode() : 0;
      result = result * 37 + (empire_key != null ? empire_key.hashCode() : 0);
      result = result * 37 + (star_key != null ? star_key.hashCode() : 0);
      result = result * 37 + (planet_index != null ? planet_index.hashCode() : 0);
      result = result * 37 + (population != null ? population.hashCode() : 0);
      result = result * 37 + (DEPRECATED_last_simulation != null ? DEPRECATED_last_simulation.hashCode() : 0);
      result = result * 37 + (focus_population != null ? focus_population.hashCode() : 0);
      result = result * 37 + (focus_farming != null ? focus_farming.hashCode() : 0);
      result = result * 37 + (focus_mining != null ? focus_mining.hashCode() : 0);
      result = result * 37 + (focus_construction != null ? focus_construction.hashCode() : 0);
      result = result * 37 + (delta_population != null ? delta_population.hashCode() : 0);
      result = result * 37 + (delta_goods != null ? delta_goods.hashCode() : 0);
      result = result * 37 + (delta_minerals != null ? delta_minerals.hashCode() : 0);
      result = result * 37 + (uncollected_taxes != null ? uncollected_taxes.hashCode() : 0);
      result = result * 37 + (defence_bonus != null ? defence_bonus.hashCode() : 0);
      result = result * 37 + (max_population != null ? max_population.hashCode() : 0);
      result = result * 37 + (cooldown_end_time != null ? cooldown_end_time.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Colony> {

    public String key;
    public String empire_key;
    public String star_key;
    public Integer planet_index;
    public Float population;
    public Long DEPRECATED_last_simulation;
    public Float focus_population;
    public Float focus_farming;
    public Float focus_mining;
    public Float focus_construction;
    public Float delta_population;
    public Float delta_goods;
    public Float delta_minerals;
    public Float uncollected_taxes;
    public Float defence_bonus;
    public Float max_population;
    public Long cooldown_end_time;

    public Builder() {
    }

    public Builder(Colony message) {
      super(message);
      if (message == null) return;
      this.key = message.key;
      this.empire_key = message.empire_key;
      this.star_key = message.star_key;
      this.planet_index = message.planet_index;
      this.population = message.population;
      this.DEPRECATED_last_simulation = message.DEPRECATED_last_simulation;
      this.focus_population = message.focus_population;
      this.focus_farming = message.focus_farming;
      this.focus_mining = message.focus_mining;
      this.focus_construction = message.focus_construction;
      this.delta_population = message.delta_population;
      this.delta_goods = message.delta_goods;
      this.delta_minerals = message.delta_minerals;
      this.uncollected_taxes = message.uncollected_taxes;
      this.defence_bonus = message.defence_bonus;
      this.max_population = message.max_population;
      this.cooldown_end_time = message.cooldown_end_time;
    }

    public Builder key(String key) {
      this.key = key;
      return this;
    }

    public Builder empire_key(String empire_key) {
      this.empire_key = empire_key;
      return this;
    }

    public Builder star_key(String star_key) {
      this.star_key = star_key;
      return this;
    }

    public Builder planet_index(Integer planet_index) {
      this.planet_index = planet_index;
      return this;
    }

    public Builder population(Float population) {
      this.population = population;
      return this;
    }

    public Builder DEPRECATED_last_simulation(Long DEPRECATED_last_simulation) {
      this.DEPRECATED_last_simulation = DEPRECATED_last_simulation;
      return this;
    }

    public Builder focus_population(Float focus_population) {
      this.focus_population = focus_population;
      return this;
    }

    public Builder focus_farming(Float focus_farming) {
      this.focus_farming = focus_farming;
      return this;
    }

    public Builder focus_mining(Float focus_mining) {
      this.focus_mining = focus_mining;
      return this;
    }

    public Builder focus_construction(Float focus_construction) {
      this.focus_construction = focus_construction;
      return this;
    }

    public Builder delta_population(Float delta_population) {
      this.delta_population = delta_population;
      return this;
    }

    public Builder delta_goods(Float delta_goods) {
      this.delta_goods = delta_goods;
      return this;
    }

    public Builder delta_minerals(Float delta_minerals) {
      this.delta_minerals = delta_minerals;
      return this;
    }

    public Builder uncollected_taxes(Float uncollected_taxes) {
      this.uncollected_taxes = uncollected_taxes;
      return this;
    }

    public Builder defence_bonus(Float defence_bonus) {
      this.defence_bonus = defence_bonus;
      return this;
    }

    public Builder max_population(Float max_population) {
      this.max_population = max_population;
      return this;
    }

    public Builder cooldown_end_time(Long cooldown_end_time) {
      this.cooldown_end_time = cooldown_end_time;
      return this;
    }

    @Override
    public Colony build() {
      return new Colony(this);
    }
  }
}
