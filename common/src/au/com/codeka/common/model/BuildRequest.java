// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.model;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.FLOAT;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;

public final class BuildRequest extends Message {

  public static final String DEFAULT_KEY = "";
  public static final String DEFAULT_COLONY_KEY = "";
  public static final String DEFAULT_EMPIRE_KEY = "";
  public static final String DEFAULT_STAR_KEY = "";
  public static final Integer DEFAULT_PLANET_INDEX = 0;
  public static final BUILD_KIND DEFAULT_BUILD_KIND = BUILD_KIND.BUILDING;
  public static final String DEFAULT_DESIGN_ID = "";
  public static final Integer DEFAULT_COUNT = 0;
  public static final Long DEFAULT_START_TIME = 0L;
  public static final Long DEFAULT_END_TIME = 0L;
  public static final Float DEFAULT_PROGRESS = 0F;
  public static final String DEFAULT_EXISTING_BUILDING_KEY = "";
  public static final Integer DEFAULT_EXISTING_BUILDING_LEVEL = 0;

  @ProtoField(tag = 1, type = STRING)
  public String key;

  /**
   * The key of the colony you're trying to build at. Must have a shipyard to build
   * a ship.
   */
  @ProtoField(tag = 2, type = STRING)
  public String colony_key;

  /**
   * The empire this build operation belongs to.
   */
  @ProtoField(tag = 3, type = STRING)
  public String empire_key;

  /**
   * The key of the star/planet this build request is happening on
   */
  @ProtoField(tag = 11, type = STRING)
  public String star_key;

  @ProtoField(tag = 12, type = INT32)
  public Integer planet_index;

  @ProtoField(tag = 4, type = ENUM)
  public BUILD_KIND build_kind;

  /**
   * The name of the design you're trying to build
   */
  @ProtoField(tag = 5, type = STRING)
  public String design_id;

  /**
   * The number of things we're building in this single operation
   */
  @ProtoField(tag = 9, type = INT32)
  public Integer count;

  /**
   * The date/time this build request started and the current predicted time of completion
   */
  @ProtoField(tag = 6, type = INT64)
  public Long start_time;

  @ProtoField(tag = 7, type = INT64)
  public Long end_time;

  /**
   * this is the "progress" of the build, from 0 (just started) to 1.0 (complete). It's not
   * always going to relate to start_time/end_time (due to lack of resources, changing focus
   * etc etc)
   */
  @ProtoField(tag = 8, type = FLOAT)
  public Float progress;

  /**
   * If this is set, then we're upgrading an existing building with the given key. This is only
   * valid if build_kind is set to BUILDING and obviously the building has to exist in the
   * current colony as well.
   */
  @ProtoField(tag = 10, type = STRING)
  public String existing_building_key;

  @ProtoField(tag = 13, type = INT32)
  public Integer existing_building_level;

  private BuildRequest(Builder builder) {
    super(builder);
    this.key = builder.key;
    this.colony_key = builder.colony_key;
    this.empire_key = builder.empire_key;
    this.star_key = builder.star_key;
    this.planet_index = builder.planet_index;
    this.build_kind = builder.build_kind;
    this.design_id = builder.design_id;
    this.count = builder.count;
    this.start_time = builder.start_time;
    this.end_time = builder.end_time;
    this.progress = builder.progress;
    this.existing_building_key = builder.existing_building_key;
    this.existing_building_level = builder.existing_building_level;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BuildRequest)) return false;
    BuildRequest o = (BuildRequest) other;
    return equals(key, o.key)
        && equals(colony_key, o.colony_key)
        && equals(empire_key, o.empire_key)
        && equals(star_key, o.star_key)
        && equals(planet_index, o.planet_index)
        && equals(build_kind, o.build_kind)
        && equals(design_id, o.design_id)
        && equals(count, o.count)
        && equals(start_time, o.start_time)
        && equals(end_time, o.end_time)
        && equals(progress, o.progress)
        && equals(existing_building_key, o.existing_building_key)
        && equals(existing_building_level, o.existing_building_level);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = key != null ? key.hashCode() : 0;
      result = result * 37 + (colony_key != null ? colony_key.hashCode() : 0);
      result = result * 37 + (empire_key != null ? empire_key.hashCode() : 0);
      result = result * 37 + (star_key != null ? star_key.hashCode() : 0);
      result = result * 37 + (planet_index != null ? planet_index.hashCode() : 0);
      result = result * 37 + (build_kind != null ? build_kind.hashCode() : 0);
      result = result * 37 + (design_id != null ? design_id.hashCode() : 0);
      result = result * 37 + (count != null ? count.hashCode() : 0);
      result = result * 37 + (start_time != null ? start_time.hashCode() : 0);
      result = result * 37 + (end_time != null ? end_time.hashCode() : 0);
      result = result * 37 + (progress != null ? progress.hashCode() : 0);
      result = result * 37 + (existing_building_key != null ? existing_building_key.hashCode() : 0);
      result = result * 37 + (existing_building_level != null ? existing_building_level.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<BuildRequest> {

    public String key;
    public String colony_key;
    public String empire_key;
    public String star_key;
    public Integer planet_index;
    public BUILD_KIND build_kind;
    public String design_id;
    public Integer count;
    public Long start_time;
    public Long end_time;
    public Float progress;
    public String existing_building_key;
    public Integer existing_building_level;

    public Builder() {
    }

    public Builder(BuildRequest message) {
      super(message);
      if (message == null) return;
      this.key = message.key;
      this.colony_key = message.colony_key;
      this.empire_key = message.empire_key;
      this.star_key = message.star_key;
      this.planet_index = message.planet_index;
      this.build_kind = message.build_kind;
      this.design_id = message.design_id;
      this.count = message.count;
      this.start_time = message.start_time;
      this.end_time = message.end_time;
      this.progress = message.progress;
      this.existing_building_key = message.existing_building_key;
      this.existing_building_level = message.existing_building_level;
    }

    public Builder key(String key) {
      this.key = key;
      return this;
    }

    public Builder colony_key(String colony_key) {
      this.colony_key = colony_key;
      return this;
    }

    public Builder empire_key(String empire_key) {
      this.empire_key = empire_key;
      return this;
    }

    public Builder star_key(String star_key) {
      this.star_key = star_key;
      return this;
    }

    public Builder planet_index(Integer planet_index) {
      this.planet_index = planet_index;
      return this;
    }

    public Builder build_kind(BUILD_KIND build_kind) {
      this.build_kind = build_kind;
      return this;
    }

    public Builder design_id(String design_id) {
      this.design_id = design_id;
      return this;
    }

    public Builder count(Integer count) {
      this.count = count;
      return this;
    }

    public Builder start_time(Long start_time) {
      this.start_time = start_time;
      return this;
    }

    public Builder end_time(Long end_time) {
      this.end_time = end_time;
      return this;
    }

    public Builder progress(Float progress) {
      this.progress = progress;
      return this;
    }

    public Builder existing_building_key(String existing_building_key) {
      this.existing_building_key = existing_building_key;
      return this;
    }

    public Builder existing_building_level(Integer existing_building_level) {
      this.existing_building_level = existing_building_level;
      return this;
    }

    @Override
    public BuildRequest build() {
      return new BuildRequest(this);
    }
  }

  public enum BUILD_KIND {
    @ProtoEnum(1)
    BUILDING,
    @ProtoEnum(2)
    SHIP,
  }
}
