diff --git a/dev/builder/build-config.js b/dev/builder/build-config.js
index 3503a81..ec72f5b 100644
--- a/dev/builder/build-config.js
+++ b/dev/builder/build-config.js
@@ -5,70 +5,43 @@
 
 var CKBUILDER_CONFIG = {
 	skin: 'moono',
+	preset: 'basic',
 	ignore: [
 		'dev',
-		'README.md',
 		'.gitignore',
 		'.gitattributes',
-		'.idea',
-		'.mailmap',
-		'.DS_Store'
+		'README.md',
+		'.mailmap'
 	],
-	plugins: {
-		a11yhelp: 1,
-		about: 1,
-		basicstyles: 1,
-		bidi: 1,
-		blockquote: 1,
-		clipboard: 1,
-		colorbutton: 1,
-		colordialog: 1,
-		contextmenu: 1,
-		dialogadvtab: 1,
-		div: 1,
-		elementspath: 1,
-		enterkey: 1,
-		entities: 1,
-		filebrowser: 1,
-		find: 1,
-		flash: 1,
-		floatingspace: 1,
-		font: 1,
-		format: 1,
-		forms: 1,
-		horizontalrule: 1,
-		htmlwriter: 1,
-		iframe: 1,
-		image: 1,
-		indent: 1,
-		justify: 1,
-		link: 1,
-		list: 1,
-		liststyle: 1,
-		magicline: 1,
-		maximize: 1,
-		newpage: 1,
-		pagebreak: 1,
-		pastefromword: 1,
-		pastetext: 1,
-		preview: 1,
-		print: 1,
-		removeformat: 1,
-		resize: 1,
-		save: 1,
-		selectall: 1,
-		showblocks: 1,
-		showborders: 1,
-		smiley: 1,
-		sourcearea: 1,
-		specialchar: 1,
-		stylescombo: 1,
-		tab: 1,
-		table: 1,
-		tabletools: 1,
-		templates: 1,
-		toolbar: 1,
-		undo: 1,
-		wysiwygarea: 1
+	plugins : {
+		'about' : 1,
+		'basicstyles' : 1,
+		'clipboard' : 1,
+		'toolbar' : 1,
+		'enterkey' : 1,
+		'entities' : 1,
+		'floatingspace' : 1,
+		'wysiwygarea' : 1,
+		'indent' : 1,
+		'link' : 1,
+		'list' : 1,
+		'pastetext' : 1,
+		'undo' : 1,
+		'dialog' : 1,
+		'dialogui' : 1,
+		'button' : 1,
+		'fakeobjects' : 1,
+		'blockquote' : 1,
+		'panel' : 1,
+		'floatpanel' : 1,
+		'listblock' : 1,
+		'richcombo' : 1,
+		'format' : 1,
+		'imgblob' : 1,
+		'justify': 1
+	},
+	languages : {
+		'en' : 1,
 	}
 };
+
diff --git a/dev/builder/copy.sh b/dev/builder/copy.sh
new file mode 100755
index 0000000..e5c9e59
--- /dev/null
+++ b/dev/builder/copy.sh
@@ -0,0 +1,5 @@
+#!/bin/bash
+
+cp ~/software/wwblog/trunk/static/ckeditor/config.js /tmp/ckeditor-config.js
+cp -r release/ckeditor/* ~/software/wwblog/trunk/static/ckeditor
+mv /tmp/ckeditor-config.js ~/software/wwblog/trunk/static/ckeditor/config.js
diff --git a/plugins/imgblob/dialogs/imgblob.js b/plugins/imgblob/dialogs/imgblob.js
new file mode 100644
index 0000000..fd47a54
--- /dev/null
+++ b/plugins/imgblob/dialogs/imgblob.js
@@ -0,0 +1,460 @@
+ï»¿/**
+ * @license Copyright (c) 2003-2012, CKSource - Frederico Knabben. All rights reserved.
+ * For licensing, see LICENSE.html or http://ckeditor.com/license
+ */
+
+(function() {
+
+  var imageDialog = function( editor, dialogType ) {
+      var LINK = 1;
+      var IMAGE = 2;
+      var CLEANUP = 3;
+
+      var previewImageId = CKEDITOR.tools.getNextId()+"_previewImage";
+
+      function getImageUrlForSize(url, size) {
+        return url.replace("=s100", "=s"+size);
+      }
+
+      // starts upload the given file
+      function startUpload(file, dlg) {
+        // the first thing we need to do is figure out the upload URL to use
+        var filename = dlg.getContentElement('info', 'filename');
+        filename.setValue('Starting...');
+        CKEDITOR.ajax.load('/blob/upload-url', function(str) {
+          var json = JSON.parse(str);
+          var uploadUrl = json.upload_url;
+          console.log("Uploading to: "+uploadUrl);
+          var xhr = new XMLHttpRequest();
+  
+          var $this = this;
+          xhr.upload.addEventListener("progress", function(evnt) {
+            if (evnt.lengthComputable) {
+              var percent = Math.round((evnt.loaded * 100) / evnt.total);
+              filename.setValue(file.name+" ... "+percent+"%");
+            }
+          }, false);
+  
+          xhr.onreadystatechange = function() {
+            if (xhr.readyState == 4) {
+              resp = JSON.parse(xhr.responseText);
+  
+              initDialog(dlg, resp);
+            }
+          };
+  
+          xhr.open("POST", uploadUrl, true);
+          xhr.setRequestHeader("X-File-Name", file.name);
+          xhr.setRequestHeader("X-File-Type", file.type);
+
+          var form = new FormData();
+          form.append("file", file);
+          xhr.send(form);
+        });
+      }
+
+      function initDialog(dlg, resp) {
+        var filename = dlg.getContentElement('info', 'filename');
+        filename.setValue(resp.filename+' ('+resp.width+'x'+resp.height+')');
+        filename.getElement().data('resp', Base64.encode(JSON.stringify(resp)));
+
+        var preview = CKEDITOR.document.getById(previewImageId);
+        var previewSize = 0;
+        if (resp.width > resp.height) {
+          previewSize = preview.getParent().getSize('width');
+        } else {
+          previewSize = preview.getParent().getSize('height');
+        }
+        preview.setAttribute('src', getImageUrlForSize(resp.url, previewSize));
+
+        var imageSize = 0;
+        if (resp.width > resp.height) {
+          imageSize = dlg.imageElement.getAttribute('width');
+        } else {
+          imageSize = dlg.imageElement.getAttribute('height');
+        }
+        if (!imageSize) {
+          imageSize = 400;
+        }
+        var size = dlg.getContentElement('info', 'size');
+        size.setValue(imageSize);
+
+        var lightbox = dlg.getContentElement('info', 'lightbox');
+        if (dlg.linkElement) {
+          lightbox.setValue(true);
+        } else {
+          lightbox.setValue(false);
+        }
+
+        dlg.imageElement.setAttribute('src', getImageUrlForSize(resp.url, previewSize));
+        dlg.imageElement.setAttribute("data-blobinfo", Base64.encode(JSON.stringify(resp)));
+      }
+
+      return {
+        title: 'Image Properties',
+        minWidth: 420,
+        minHeight: 360,
+        onShow: function() {
+          this.imageElement = false;
+          this.linkElement = false;
+
+          // Default: create a new element.
+          this.imageEditMode = false;
+          this.linkEditMode = false;
+
+          this.firstLoad = true;
+          this.addLink = false;
+
+          var editor = this.getParentEditor();
+          var sel = editor.getSelection();
+          var element = sel && sel.getSelectedElement();
+
+          var link = element && editor.elementPath(element).contains('a', 1);
+          if (link) {
+            this.linkElement = link;
+            this.linkEditMode = true;
+
+            // look for the image element inside this link.
+            var linkChildren = link.getChildren();
+            if (linkChildren.count() == 1) {
+              var childTagName = linkChildren.getItem(0).getName();
+              if (childTagName == 'img') {
+                this.imageElement = linkChildren.getItem(0);
+                this.imageEditMode = true;
+              }
+            }
+
+            this.setupContent(LINK, link);
+          }
+
+          if (element && element.getName() == 'img' && !element.data('cke-realelement')) {
+            this.imageEditMode = true;
+            this.imageElement = element;
+          }
+
+          if (this.imageEditMode) {
+            // Use the original element as a buffer, since we don't want
+            // temporary changes to be committed, e.g. if the dialog is canceled.
+            this.originalImageElement = this.imageElement;
+            this.imageElement = this.originalImageElement.clone(true, true);
+
+            // Fill out all fields.
+            this.setupContent(IMAGE, this.imageElement);
+          } else {
+            // inserting a new image
+            this.imageElement = editor.document.createElement('img');
+          }
+        },
+        onOk: function() {
+          if (this.imageEditMode) {
+            // restore the original element before all commits.
+            this.imageElement = this.originalImageElement;
+            delete this.originalImageElement;
+          } else {
+            this.imageElement = editor.document.createElement('img');
+            this.imageElement.setAttribute('alt', '');
+          }
+
+          if (!this.linkEditMode) {
+            this.linkElement = editor.document.createElement('a');
+          }
+
+          this.commitContent(IMAGE, this.imageElement);
+          this.commitContent(LINK, this.linkElement);
+
+          // remove empty style attribute.
+          if (!this.imageElement.getAttribute('style')) {
+            this.imageElement.removeAttribute('style');
+          }
+
+          if (!this.imageEditMode) {
+            // insert a new image, if required.
+            if (this.addLink) {
+              if (!this.linkEditMode) {
+                editor.insertElement(this.linkElement);
+                this.linkElement.append(this.imageElement, false);
+              } else {
+                editor.insertElement(this.imageElement);
+              }
+            } else {
+              editor.insertElement(this.imageElement);
+            }
+          } else {
+            // modify an existing image
+            if (!this.linkEditMode && this.addLink) {
+              editor.insertElement(this.linkElement);
+              this.imageElement.appendTo(this.linkElement);
+            } else if (this.linkEditMode && !this.addLink) {
+              this.linkElement.remove(1);
+              editor.insertElement(this.imageElement);
+            }
+          }
+        },
+        onHide: function() {
+          //TODO:??
+          delete this.imageElement;
+        },
+        contents: [ {
+          id: 'info',
+          label: editor.lang.image.infoTab,
+          accessKey: 'I',
+          elements: [ {
+            type: 'vbox',
+            padding: 0,
+            children: [ {
+              type: 'hbox',
+              widths: [ '290px', '100px' ],
+              align: 'right',
+              children: [ {
+                id: 'filename',
+                type: 'text',
+                label: 'Filename',
+                onLoad: function() {
+                  this.getElement().setAttribute('disabled', 'disabled');
+                },
+                commit: function(type, elem) {
+                  var resp = JSON.parse(Base64.decode(this.getElement().data('resp')));
+                  if (type == IMAGE) {
+                    var size = this.getDialog().getContentElement('info', 'size');
+                    var url = getImageUrlForSize(resp.url, size.getValue());
+                    elem.setAttribute('src', url);
+                    elem.data('cke-saved-src', url);
+                    elem.data('resp', this.getElement().data('resp'));
+                  }
+                },
+                setup: function(type, elem) {
+                  if (type == IMAGE) {
+                    var resp = JSON.parse(Base64.decode(elem.data('resp')));
+                    initDialog(this.getDialog(), resp);
+                  }
+                }
+              }, {
+                type: 'button',
+                id: 'browse',
+                style: 'display: inline-block; margin-top: 14px;',
+                label: 'Browse',
+                onLoad: function() {
+                  var dlg = this.getDialog();
+                  var fileInput = CKEDITOR.document.createElement('input');
+                  fileInput.setAttribute('type', 'file');
+                  fileInput.on('change', function(evnt) {
+                    startUpload(evnt.sender.$.files[0], dlg);
+                  });
+                  fileInput.setAttribute('style', 'position: absolute; visibility: collapse');
+                  this.getElement().getParent().append(fileInput);
+                  this.on('click', function(evnt) {
+                    // CKEDITOR's "fire" method doesn't actually fire the native
+                    // event, so we have to do it here. This doesn't work in old
+                    // IE, but I don't care.
+                    var evt = document.createEvent('HTMLEvents');
+                    evt.initEvent('click', true, true);
+                    fileInput.$.dispatchEvent(evt);
+                  });
+                }
+              } ]
+            } ]
+          }, {
+            id: 'caption',
+            type: 'text',
+            label: 'Caption',
+            accessKey: 'T',
+            'default': '',
+            setup: function(type, element) {
+              if (type == IMAGE) {
+                this.setValue(element.getAttribute('alt'));
+              }
+            },
+            commit: function(type, element) {
+              if (type == IMAGE) {
+                if (this.getValue() || this.isChanged())
+                  element.setAttribute('alt', this.getValue());
+              } else if (type == LINK) {
+                element.setAttribute('title', this.getValue());
+              } else if (type == CLEANUP) {
+                element.removeAttribute('alt');
+              }
+            }
+          }, {
+            type: 'hbox',
+            widths: [ '110px', '280px' ],
+            align: 'left', 
+            children: [ {
+              type: 'vbox',
+              children: [ {
+                id: 'size',
+                type: 'text',
+                label: 'Size'
+              }, {
+                id: 'lightbox',
+                type: 'checkbox',
+                label: 'Lightbox',
+                commit: function(type, elem) {
+                  if (this.getValue()) {
+                    this.getDialog().addLink = true;
+                    var resp = JSON.parse(Base64.decode(this.getDialog().getContentElement('info', 'filename').getElement().data('resp')));
+                    if (type == LINK) {
+                      elem.setAttribute('class', 'lightbox');
+                      elem.setAttribute('href', getImageUrlForSize(resp.url, Math.max(resp.width, resp.height)));
+                    }
+                  } else {
+                    this.getDialog().addLink = false;
+                  }
+                }
+              }, {
+                id: 'float',
+                label: 'Float',
+                type: 'select',
+                items: [
+                  [ 'None', '' ],
+                  [ 'Left', 'left' ],
+                  [ 'Right', 'right' ]
+                ],
+                setup: function(type, elem) {
+                  if (type == IMAGE) {
+                    var value = elem.getStyle('float');
+                    if (value == 'none' || value == 'inherit') {
+                      value = '';
+                    }
+                    this.setValue(value);
+                  }
+                },
+                commit: function(type, elem) {
+                  if (type == IMAGE) {
+                    var value = this.getValue();
+                    elem.removeClass('float-left');
+                    elem.removeClass('float-right');
+                    elem.removeStyle('float');
+                    if (value) {
+                      elem.addClass('float-'+value);
+                      elem.setStyle('float', value);
+                    }
+                  }
+                }
+              }]
+            }, {
+              type: 'html',
+              html:
+                '<div style="width: 100%; height: 200px; border: solid 1px #000; text-align: center;">' +
+                  '<img src="" id="'+previewImageId+'" />' +
+                '</div>'
+            } ]
+          } ]
+        } ]
+      };
+    };
+
+  CKEDITOR.dialog.add( 'imgblob', function( editor ) {
+    return imageDialog( editor, 'imgblob' );
+  });
+
+
+  // TODO: this is rather ugly...
+  var Base64 = {
+    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
+    encode : function (input) {
+      var output = "";
+      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
+      var i = 0;
+
+      input = Base64._utf8_encode(input);
+
+      while (i < input.length) {
+        chr1 = input.charCodeAt(i++);
+        chr2 = input.charCodeAt(i++);
+        chr3 = input.charCodeAt(i++);
+
+        enc1 = chr1 >> 2;
+        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
+        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
+        enc4 = chr3 & 63;
+
+        if (isNaN(chr2)) {
+          enc3 = enc4 = 64;
+        } else if (isNaN(chr3)) {
+          enc4 = 64;
+        }
+
+        output = output +
+        this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
+        this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
+      }
+
+      return output;
+    },
+    decode : function (input) {
+      var output = "";
+      var chr1, chr2, chr3;
+      var enc1, enc2, enc3, enc4;
+      var i = 0;
+
+      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
+      while (i < input.length) {
+        enc1 = this._keyStr.indexOf(input.charAt(i++));
+        enc2 = this._keyStr.indexOf(input.charAt(i++));
+        enc3 = this._keyStr.indexOf(input.charAt(i++));
+        enc4 = this._keyStr.indexOf(input.charAt(i++));
+
+        chr1 = (enc1 << 2) | (enc2 >> 4);
+        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
+        chr3 = ((enc3 & 3) << 6) | enc4;
+
+        output = output + String.fromCharCode(chr1);
+
+        if (enc3 != 64) {
+          output = output + String.fromCharCode(chr2);
+        }
+        if (enc4 != 64) {
+          output = output + String.fromCharCode(chr3);
+        } 
+      }
+      output = Base64._utf8_decode(output);
+      return output;
+    },
+    _utf8_encode : function (string) {
+      string = string.replace(/\r\n/g,"\n");
+      var utftext = "";
+
+      for (var n = 0; n < string.length; n++) {
+        var c = string.charCodeAt(n);
+        if (c < 128) {
+          utftext += String.fromCharCode(c);
+        }
+        else if((c > 127) && (c < 2048)) {
+          utftext += String.fromCharCode((c >> 6) | 192);
+          utftext += String.fromCharCode((c & 63) | 128);
+        }
+        else {
+          utftext += String.fromCharCode((c >> 12) | 224);
+          utftext += String.fromCharCode(((c >> 6) & 63) | 128);
+          utftext += String.fromCharCode((c & 63) | 128);
+        }
+      }
+      return utftext;
+    },
+    _utf8_decode : function (utftext) {
+      var string = "";
+      var i = 0;
+      var c = c1 = c2 = 0;
+
+      while ( i < utftext.length ) {
+        c = utftext.charCodeAt(i);
+        if (c < 128) {
+          string += String.fromCharCode(c);
+          i++;
+        }
+        else if((c > 191) && (c < 224)) {
+          c2 = utftext.charCodeAt(i+1);
+          string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
+          i += 2;
+        }
+        else {
+          c2 = utftext.charCodeAt(i+1);
+          c3 = utftext.charCodeAt(i+2);
+          string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
+          i += 3;
+        }
+      }
+      return string;
+    }
+  }
+})();
diff --git a/plugins/imgblob/icons/imgblob.png b/plugins/imgblob/icons/imgblob.png
new file mode 100644
index 0000000..3e07ac8
Binary files /dev/null and b/plugins/imgblob/icons/imgblob.png differ
diff --git a/plugins/imgblob/images/noimage.png b/plugins/imgblob/images/noimage.png
new file mode 100644
index 0000000..1598113
Binary files /dev/null and b/plugins/imgblob/images/noimage.png differ
diff --git a/plugins/imgblob/lang/en.js b/plugins/imgblob/lang/en.js
new file mode 100644
index 0000000..60beb0c
--- /dev/null
+++ b/plugins/imgblob/lang/en.js
@@ -0,0 +1,26 @@
+ï»¿/*
+Copyright (c) 2003-2012, CKSource - Frederico Knabben. All rights reserved.
+For licensing, see LICENSE.html or http://ckeditor.com/license
+*/
+CKEDITOR.plugins.setLang( 'image', 'en', {
+	alertUrl: 'Please type the image URL',
+	alt: 'Alternative Text',
+	border: 'Border',
+	btnUpload: 'Send it to the Server',
+	button2Img: 'Do you want to transform the selected image button on a simple image?',
+	hSpace: 'HSpace',
+	img2Button: 'Do you want to transform the selected image on a image button?',
+	infoTab: 'Image Info',
+	linkTab: 'Link',
+	lockRatio: 'Lock Ratio',
+	menu: 'Image Properties',
+	resetSize: 'Reset Size',
+	title: 'Image Properties',
+	titleButton: 'Image Button Properties',
+	upload: 'Upload',
+	urlMissing: 'Image source URL is missing.',
+	vSpace: 'VSpace',
+	validateBorder: 'Border must be a whole number.',
+	validateHSpace: 'HSpace must be a whole number.',
+	validateVSpace: 'VSpace must be a whole number.'
+});
diff --git a/plugins/imgblob/plugin.js b/plugins/imgblob/plugin.js
new file mode 100644
index 0000000..459bbab
--- /dev/null
+++ b/plugins/imgblob/plugin.js
@@ -0,0 +1,148 @@
+ï»¿/**
+ * @license Copyright (c) 2003-2012, CKSource - Frederico Knabben. All rights reserved.
+ * For licensing, see LICENSE.html or http://ckeditor.com/license
+ */
+
+/**
+ * @fileOverview Imgblob plugin, based on Image plugin, but auto-uploads to
+ * App Engine BlobStore, and also supports "auto-lightbox" (i.e. check a checkbox
+ * and we'll turn the image into a lightbox)
+ */
+
+(function() {
+
+	CKEDITOR.plugins.add( 'imgblob', {
+		requires: 'dialog,ajax',
+		lang: 'en', // %REMOVE_LINE_CORE%
+		icons: 'imgblob', // %REMOVE_LINE_CORE%
+		init: function( editor ) {
+			var pluginName = 'imgblob';
+
+			// Register the dialog.
+			CKEDITOR.dialog.add( pluginName, this.path + 'dialogs/imgblob.js' );
+
+			// Register the command.
+			editor.addCommand( pluginName, new CKEDITOR.dialogCommand( pluginName ) );
+
+			// Register the toolbar button.
+			editor.ui.addButton && editor.ui.addButton( 'Image', {
+				label: editor.lang.common.image,
+				command: pluginName,
+				toolbar: 'insert,10'
+			});
+
+			editor.on( 'doubleclick', function( evt ) {
+				var element = evt.data.element;
+
+				if ( element.is( 'img' ) && !element.data( 'cke-realelement' ) && !element.isReadOnly() )
+					evt.data.dialog = 'imgblob';
+			});
+
+			// If the "menu" plugin is loaded, register the menu items.
+			if ( editor.addMenuItems ) {
+				editor.addMenuItems({
+					image: {
+						label: editor.lang.image.menu,
+						command: pluginName,
+						group: 'image'
+					}
+				});
+			}
+
+			// If the "contextmenu" plugin is loaded, register the listeners.
+			if ( editor.contextMenu ) {
+				editor.contextMenu.addListener( function( element, selection ) {
+					if ( getSelectedImage( editor, element ) )
+						return { image: CKEDITOR.TRISTATE_OFF };
+				});
+			}
+		},
+		afterInit: function( editor ) {
+			// Customize the behavior of the alignment commands. (#7430)
+			setupAlignCommand( 'left' );
+			setupAlignCommand( 'right' );
+			setupAlignCommand( 'center' );
+			setupAlignCommand( 'block' );
+
+			function setupAlignCommand( value ) {
+				var command = editor.getCommand( 'justify' + value );
+				if ( command ) {
+					if ( value == 'left' || value == 'right' ) {
+						command.on( 'exec', function( evt ) {
+							var img = getSelectedImage( editor ),
+								align;
+							if ( img ) {
+								align = getImageAlignment( img );
+								if ( align == value ) {
+									img.removeStyle( 'float' );
+
+									// Remove "align" attribute when necessary.
+									if ( value == getImageAlignment( img ) )
+										img.removeAttribute( 'align' );
+								} else
+									img.setStyle( 'float', value );
+
+								evt.cancel();
+							}
+						});
+					}
+
+					command.on( 'refresh', function( evt ) {
+						var img = getSelectedImage( editor ),
+							align;
+						if ( img ) {
+							align = getImageAlignment( img );
+
+							this.setState(
+							( align == value ) ? CKEDITOR.TRISTATE_ON : ( value == 'right' || value == 'left' ) ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED );
+
+							evt.cancel();
+						}
+					});
+				}
+			}
+		}
+	});
+
+	function getSelectedImage( editor, element ) {
+		if ( !element ) {
+			var sel = editor.getSelection();
+			element = sel.getSelectedElement();
+		}
+
+		if ( element && element.is( 'img' ) && !element.data( 'cke-realelement' ) && !element.isReadOnly() )
+			return element;
+	}
+
+	function getImageAlignment( element ) {
+		var align = element.getStyle( 'float' );
+
+		if ( align == 'inherit' || align == 'none' )
+			align = 0;
+
+		if ( !align )
+			align = element.getAttribute( 'align' );
+
+		return align;
+	}
+
+})();
+
+/**
+ * Whether to remove links when emptying the link URL field in the image dialog.
+ *
+ *		config.image_removeLinkByEmptyURL = false;
+ *
+ * @cfg {Boolean} [image_removeLinkByEmptyURL=true]
+ * @member CKEDITOR.config
+ */
+CKEDITOR.config.image_removeLinkByEmptyURL = true;
+
+/**
+ * Padding text to set off the image in preview area.
+ *
+ *		config.image_previewText = CKEDITOR.tools.repeat( '___ ', 100 );
+ *
+ * @cfg {String} [image_previewText='Lorem ipsum dolor...' (placeholder text)]
+ * @member CKEDITOR.config
+ */
